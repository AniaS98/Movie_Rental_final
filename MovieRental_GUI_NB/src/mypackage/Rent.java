package mypackage;


import javax.swing.JFrame;
//import java.util.stream;

import MovieRental_NetBeans.*;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import movierental_netbeans.AvailableMoviesList;
import movierental_netbeans.Client;
import movierental_netbeans.Movie;
import movierental_netbeans.Main;


public class Rent extends javax.swing.JFrame {


    public AvailableMoviesList movies;
    DefaultListModel<String> lm;
    public Client client;
    DefaultListModel<Movie> mov; ///hmm
    DefaultListModel<Movie> dramas;
    DefaultListModel<Movie> comedies;
    DefaultListModel<Movie> horrors;
    DefaultListModel<Movie> biographicals;
    DefaultListModel<Movie> psychologicals;
    DefaultListModel<Movie> wars;
    DefaultListModel<Movie> gangsters;
    DefaultListModel<Movie> thrillers;
    
    ArrayList<String> movlist;
    ArrayList<String> dramaslist;
    ArrayList<String> comedieslist;
    ArrayList<String> horrorslist;
    ArrayList<String> biographicalslist;
    ArrayList<String> psychologicalslist;
    ArrayList<String> warslist;
    ArrayList<String> gangsterslist;
    ArrayList<String> thrillerslist;
    
    ArrayList lista;
    
    
    public Rent() {
        initComponents();
    }
    
    public Rent(Client c, AvailableMoviesList m)
    {
        initComponents();
        
        movlist = new ArrayList<String>();
        dramaslist = new ArrayList<String>();
        comedieslist = new ArrayList<String>();
        horrorslist = new ArrayList<String>();
        biographicalslist = new ArrayList<String>();
        psychologicalslist = new ArrayList<String>();
        warslist = new ArrayList<String>();
        gangsterslist = new ArrayList<String>();
        thrillerslist = new ArrayList<String>();
        
        lista = new ArrayList();
        
        client = c;
        movies = m;
        lm = new DefaultListModel<String>();
        mov = new DefaultListModel<Movie>();
        for (Movie movie : movies.MovieList)
        {
            lm.addElement(movie.toString());
            lista.add(movie);
            
            movlist.add(movie.toString());
            mov.addElement(movie);
        }
        movieList.setModel(lm);
         //listBox_lista.ItemsSource = lf;
        
        dramas = new DefaultListModel<Movie>();
        ArrayList<Movie> list = new ArrayList<Movie>(movies.GenresSearch(lista, 0));
        for(Movie f : list)
        {
            dramaslist.add(f.toString());
            dramas.addElement(f);
        }
        comedies = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 1));
        for(Movie f : list)
        {
            comedies.addElement(f);
            comedieslist.add(f.toString());
        }
        horrors = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 2));
        for(Movie f : list)
        {
            horrors.addElement(f);
            horrorslist.add(f.toString());
        }
        biographicals = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 3));
        for(Movie f : list)
        {
            biographicals.addElement(f);
            biographicalslist.add(f.toString());
        }
        psychologicals = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 4));
        for(Movie f : list)
        {
            psychologicals.addElement(f);
            psychologicalslist.add(f.toString());
        }
        wars = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 5));
        for(Movie f : list)
        {
            wars.addElement(f);
            warslist.add(f.toString());
        }
        gangsters = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 6));
        for(Movie f : list)
        {
            gangsters.addElement(f);
            gangsterslist.add(f.toString());
        }
        thrillers = new DefaultListModel<Movie>();
        list = new ArrayList<Movie>(movies.GenresSearch(lista, 7));
        for(Movie f : list)
        {
            thrillers.addElement(f);
            thrillerslist.add(f.toString());
        }      

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        categoryCombobox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        movieList = new javax.swing.JList<>();
        rentButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose category");

        jLabel2.setText("List of available movies");

        categoryCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Drama", "Comedy", "Horror", "Biographical", "Psychological", "War", "Gangster", "Thriller" }));
        categoryCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboboxActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(movieList);

        rentButton.setText("Rent");
        rentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(categoryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(rentButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rentButton)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int MovieSearch(DefaultListModel<Movie> list, Movie m)
    {
        for(int i=0;i<list.capacity();i++)
        {
            if(list.elementAt(i)==m)
                return i;  
        }
        return 0;
    }
    
    private void rentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentButtonActionPerformed
        int selected = movieList.getAnchorSelectionIndex();
        if (selected != -1)
        {
            Movie m = new Movie(); 
            
            System.out.println(categoryCombobox.getItemAt(0)); 
                   
            
            if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(1))
            {
                m = dramas.elementAt(selected);
                movies.RentingMovie(client, m);
                dramas.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(2))
            {
                m = comedies.elementAt(selected);
                movies.RentingMovie(client, m);
                comedies.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(3))
            {
                m = horrors.elementAt(selected);
                movies.RentingMovie(client, m);
                horrors.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(4))
            {
                m = biographicals.elementAt(selected);
                movies.RentingMovie(client, m);
                biographicals.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(5))
            {
                m = psychologicals.elementAt(selected);
                movies.RentingMovie(client, m);
                psychologicals.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(6))
            {
                m = wars.elementAt(selected);
                movies.RentingMovie(client, m);
                wars.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(7))
            {
                m = gangsters.elementAt(selected);
                movies.RentingMovie(client, m);
                gangsters.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else if(categoryCombobox.getSelectedItem() ==categoryCombobox.getItemAt(8))
            {
                m = thrillers.elementAt(selected);
                movies.RentingMovie(client, m);
                thrillers.remove(selected);
                mov.remove(MovieSearch(mov, m));
            }
            else
            {
                 m = mov.elementAt(selected);  
                 movies.RentingMovie(client, m);
                 mov.remove(selected);
                 System.out.println("Dziala w oknie rent"); 

                 int num = movies.GenresPick(m);
                 switch(num)
                 {
                     case 1:
                     {
                         dramas.remove(MovieSearch(dramas, m));
                         break;
                     }
                     case 2:
                     {
                         comedies.remove(MovieSearch(comedies, m));
                         break;
                     }
                     case 3:
                     {
                         horrors.remove(MovieSearch(horrors, m));
                         break;
                     }
                     case 4:
                     {
                         biographicals.remove(MovieSearch(biographicals, m));
                         break;
                     }
                     case 5:
                     {
                         psychologicals.remove(MovieSearch(psychologicals, m));
                         break;
                     }
                     case 6:
                     {
                         wars.remove(MovieSearch(wars, m));
                         break;
                     }
                     case 7:
                     {
                         gangsters.remove(MovieSearch(gangsters, m));
                         break;
                     }
                     case 8:
                     {
                         thrillers.remove(MovieSearch(thrillers, m));
                         break;
                     }
                 } 
            }
            /*else
            {
                movies.RentingMovie(client, lm[selected]);
                
            }*/
        }
        else
        {
                JOptionPane.showMessageDialog(null, "You did't choose any movie", "Attention!", JOptionPane.INFORMATION_MESSAGE);;
                return;
        }
        this.dispose();
    }//GEN-LAST:event_rentButtonActionPerformed

    //displaying movies by genre
    private void categoryComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboboxActionPerformed
        String selected = (String)categoryCombobox.getSelectedItem();
        
        switch (selected)
        {
            case "Drama":
                
                DefaultListModel<String> temporarydramas = new DefaultListModel<String>();
                for (var i : dramaslist) {
                    temporarydramas.addElement(i.toString());
                }
                if(dramaslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarydramas);
                }
                break;
            
            case "Comedy":
                
                DefaultListModel<String> temporarycomedies = new DefaultListModel<String>();
                for (var i : comedieslist) {
                    temporarycomedies.addElement(i.toString());
                }
                if(comedieslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarycomedies);
                }
                break;
                
            case "Horror":
                
                DefaultListModel<String> temporaryhorrors = new DefaultListModel<String>();
                for (var i : horrorslist) {
                    temporaryhorrors.addElement(i.toString());
                }
                if(horrorslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporaryhorrors);
                } 
                break;
                
            case "Biographical":
                
                DefaultListModel<String> temporarybiographicals = new DefaultListModel<String>();
                for (var i : biographicalslist) {
                    temporarybiographicals.addElement(i.toString());
                }
                if(biographicalslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarybiographicals);
                } 
                break;
                
            case "Psychological":
                
                DefaultListModel<String> temporarypsychologicals = new DefaultListModel<String>();
                for (var i : psychologicalslist) {
                    temporarypsychologicals.addElement(i.toString());
                }
                if(psychologicalslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarypsychologicals);
                } 
                break;
                
            case "War":
                
                DefaultListModel<String> temporarywars = new DefaultListModel<String>();
                for (var i : warslist) {
                    temporarywars.addElement(i.toString());
                }
                if(warslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarywars);
                } 
                break;
                
            case "Gangster":
                
                DefaultListModel<String> temporarygangsters = new DefaultListModel<String>();
                for (var i : gangsterslist) {
                    temporarygangsters.addElement(i.toString());
                }
                if(gangsterslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarygangsters);
                }
                break;
                
            case "Thriller":
                
                DefaultListModel<String> temporarythrillers = new DefaultListModel<String>();
                for (var i : thrillerslist) {
                    temporarythrillers.addElement(i.toString());
                }
                if(thrillerslist.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporarythrillers);
                } 
                break;
            
            default:
                DefaultListModel<String> temporaryall = new DefaultListModel<String>();
                for (var i : lista) {
                    temporaryall.addElement(i.toString());
                }
                if(lista.isEmpty()) {
                    String[] str = new String[1];
                    str[0] = "No available movies.";
                    movieList.setListData(str);
                }
                else {
                    movieList.setModel(temporaryall);
                } 
                break;
        }
        
    }//GEN-LAST:event_categoryComboboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> categoryCombobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> movieList;
    private javax.swing.JButton rentButton;
    // End of variables declaration//GEN-END:variables

    /*private int GenresPick(Movie m) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }*/


}